name: CI

on:
  workflow_dispatch:
    inputs:
      use_qemu:
        description: 'Use qemu to build linux aarch64, ppc64le & s390x'
        required: true
        default: true
  schedule:
    - cron: '0 18 * * 5'  # "At 18:00 on Friday."
  pull_request:
  push:
    branches:
      - master
      - main
    tags:
      - "*.*.*"

env:
  USE_QEMU: ${{ fromJSON(github.event.inputs.use_qemu || 'false') || (github.event_name == 'schedule') || startsWith(github.ref, 'refs/tags/') }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.3


  build_wheels:
    name: Build ${{ matrix.build }}${{ matrix.arch }} wheels on ${{ matrix.os }}
    needs: [lint]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            arch: "x86_64"
            build: "manylinux_"
            use_qemu: false
          - os: ubuntu-20.04
            arch: "x86_64"
            build: "musllinux_"
            use_qemu: false
          - os: ubuntu-20.04
            arch: "i686"
            build: "manylinux_"
            use_qemu: false
          - os: ubuntu-20.04
            arch: "i686"
            build: "musllinux_"
            use_qemu: false
          - os: ubuntu-20.04
            arch: "aarch64"
            build: "manylinux_"
            use_qemu: true
          - os: ubuntu-20.04
            arch: "aarch64"
            build: "musllinux_"
            use_qemu: true
          - os: ubuntu-20.04
            arch: "ppc64le"
            build: "manylinux_"
            use_qemu: true
          - os: ubuntu-20.04
            arch: "ppc64le"
            build: "musllinux_"
            use_qemu: true
          - os: ubuntu-20.04
            arch: "s390x"
            build: "manylinux_"
            use_qemu: true
          - os: ubuntu-20.04
            arch: "s390x"
            build: "musllinux_"
            use_qemu: true
          - os: windows-2019
            arch: "AMD64"
            build: ""
            use_qemu: false
          - os: windows-2019
            arch: "x86"
            build: ""
            use_qemu: false
          - os: macos-10.15
            arch: "x86_64"
            build: ""
            use_qemu: false

    steps:
      - uses: actions/checkout@v2
        if: (!matrix.use_qemu) || fromJSON(env.USE_QEMU)
        with:
          fetch-depth: 0  # required for versioneer to find tags

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.0.0
        if: matrix.use_qemu && fromJSON(env.USE_QEMU)

      - name: Build wheels
        uses: pypa/cibuildwheel@2.5.0
        if: (!matrix.use_qemu) || fromJSON(env.USE_QEMU)
        env:
          CIBW_ARCHS: "${{ matrix.arch }}"
          CIBW_BUILD: "cp39-${{ matrix.build }}*"

      - uses: actions/upload-artifact@v2
        if: (!matrix.use_qemu) || fromJSON(env.USE_QEMU)
        with:
          path: ./wheelhouse/*.whl

  build_manylinux1_wheels:
    name: Build ${{ matrix.arch }} manylinux1 wheels
    needs: [lint]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: "x86_64"
          - arch: "i686"

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # required for versioneer to find tags

      - name: Build wheels
        uses: pypa/cibuildwheel@2.5.0
        env:
          CIBW_ARCHS: "${{ matrix.arch }}"
          CIBW_BUILD: "cp39-manylinux_*"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux1"
          CIBW_MANYLINUX_I686_IMAGE: "manylinux1"

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    needs: [lint]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # required for versioneer to find tags

      - name: Build SDist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  test_sdist:
    name: Test SDist with python ${{ matrix.python }}
    needs: [build_sdist]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python: ["2.7", "3.6", "3.10"]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python ${{ matrix.python }}
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libssl-dev
          pip install -r requirements-dev.txt

      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Install SDist
        env:
          SKBUILD_CONFIGURE_OPTIONS: "-DBUILD_CMAKE_FROM_SOURCE:BOOL=OFF"
        run: |
          pip install dist/*.tar.gz
          rm -rf dist

      - name: Test installed SDist
        run: pytest ./tests

  check_dist:
    name: Check dist
    needs: [build_wheels, build_manylinux1_wheels, build_sdist, test_sdist]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - run: pipx run twine check --strict dist/*

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_manylinux1_wheels, build_sdist, test_sdist, check_dist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.repository == 'scikit-build/cmake-python-distributions' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          password: ${{ secrets.PYPI_RELEASE_PASSWORD }}
