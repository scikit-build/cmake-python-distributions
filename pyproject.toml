[build-system]
requires = ["scikit-build-core>=0.10"]
build-backend = "backend"
backend-path = ["_build_backend"]

[project]
name = "cmake"
version = "4.1.0"
description = "CMake is an open-source, cross-platform family of tools designed to build, test and package software"
keywords = ["CMake", "build", "c++", "fortran", "cross-platform", "cross-compilation"]
readme = "README.rst"
license = {text = "Apache 2.0"}
authors = [
    {name = "Jean-Christophe Fillion-Robin", email = "jchris.fillionr@kitware.com"},
]
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: C",
    "Programming Language :: C++",
    "Programming Language :: Fortran",
    "Programming Language :: Python",
    "Operating System :: OS Independent",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "Typing :: Typed"
]
requires-python = ">=3.8"

[project.urls]
Homepage = "https://cmake.org"
Documentation = "https://cmake-python-distributions.readthedocs.io"
Source = "https://github.com/scikit-build/cmake-python-distributions"
"Mailing list" = "https://groups.google.com/forum/#!forum/scikit-build"
"Bug Tracker" = "https://github.com/scikit-build/cmake-python-distributions/issues"

[project.scripts]
ccmake = "cmake:ccmake"
cmake = "cmake:cmake"
cpack = "cmake:cpack"
ctest = "cmake:ctest"


[dependency-groups]
test = [
  "coverage>=4.2",
  "pytest>=6",
  "pytest-cov>=2.4.0",
]
docs = [
  "docutils",
  "funcparserlib>=1.0.0",
  "furo",
  "pygments",
  "sphinx",
  "sphinxcontrib-mermaid",
  "tomli; python_version<'3.11'",
]
dev = [{ include-group="test" }]


[tool.scikit-build]
minimum-version = "build-system.requires"
build-dir = "build/{wheel_tag}"
cmake.version = "CMakeLists.txt"
ninja.make-fallback = true
wheel.py-api = "py3"
wheel.expand-macos-universal-tags = true
wheel.install-dir = "cmake/data"

[[tool.scikit-build.generate]]
path = "cmake/_version.py"
template = '''
version = "${version}"
'''

[[tool.scikit-build.overrides]]
if.env.CMAKE_PYTHON_DIST_FORCE_NINJA_DEP = true
ninja.make-fallback = false

[[tool.scikit-build.overrides]]
if.state = "metadata_wheel"
wheel.cmake = false
wheel.platlib = true


[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]


[tool.cibuildwheel]
archs = ["auto64", "auto32"]
build = "cp310-*"
test-groups = ["test"]
test-command = "pytest {project}/tests"
build-verbosity = 1
build-frontend = "build[uv]"
config-settings."cmake.define.RUN_CMAKE_TEST" = "ON"
environment = { CMAKE_PYTHON_DIST_FORCE_NINJA_DEP = "1" }
manylinux-x86_64-image = "manylinux2014"
manylinux-i686-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
manylinux-ppc64le-image = "manylinux2014"
manylinux-s390x-image = "manylinux2014"
manylinux-armv7l-image = "manylinux_2_31"
manylinux-riscv64-image = "ghcr.io/mayeut/manylinux_2_35:2025.08.02-2"
musllinux-x86_64-image = "musllinux_1_2"
musllinux-i686-image = "musllinux_1_2"
musllinux-aarch64-image = "musllinux_1_2"
musllinux-ppc64le-image = "musllinux_1_2"
musllinux-s390x-image = "musllinux_1_2"
musllinux-armv7l-image = "musllinux_1_2"
musllinux-riscv64-image = "musllinux_1_2"

[[tool.cibuildwheel.overrides]]
select = "*-macos*"
inherit.environment = "append"
environment = { MACOSX_DEPLOYMENT_TARGET = "10.10" }

[[tool.cibuildwheel.overrides]]
select = "*-*linux*"
before-all = "./scripts/manylinux-build-and-install-openssl.sh"
inherit.environment = "prepend"
environment = { PKG_CONFIG_PATH = "/usr/local/ssl/lib/pkgconfig" }
inherit.config-settings = "prepend"
config-settings."cmake.define.OPENSSL_ROOT_DIR" = "/usr/local/ssl"
config-settings."cmake.define.OPENSSL_USE_STATIC_LIBS" = "ON"
config-settings."cmake.define.CMAKE_JOB_POOL_COMPILE" = "compile"
config-settings."cmake.define.CMAKE_JOB_POOL_LINK" = "link"
config-settings."cmake.define.CMAKE_JOB_POOLS" = "compile=4;link=1"

[[tool.cibuildwheel.overrides]]
select = ["*-manylinux_armv7l"]
inherit.config-settings = "append"
# disable some tests
# - RunCMake.CompilerId fails because architecture id is not detected properly for gfortran on Ubuntu 20.04 https://gitlab.kitware.com/cmake/cmake/-/issues/27129
config-settings."cmake.define.RUN_CMAKE_TEST_EXCLUDE" = "RunCMake.CompilerId"

[[tool.cibuildwheel.overrides]]
select = ["*-musllinux_*"]
inherit.config-settings = "append"
# disable some tests
# - BootstrapTest fails with custom OpenSSL and probably does not make much sense for this project
# - ExportImport|RunCMake.install|RunCMake.file-GET_RUNTIME_DEPENDENCIES: c.f. https://discourse.cmake.org/t/cmake-test-suite-failing-on-alpine-linux/5064
config-settings."cmake.define.RUN_CMAKE_TEST_EXCLUDE" = "BootstrapTest|CTestTestFdSetSize|ExportImport|RunCMake.install|RunCMake.RuntimePath|RunCMake.file-GET_RUNTIME_DEPENDENCIES"

[[tool.cibuildwheel.overrides]]
select = ["*linux_ppc64le", "*linux_s390x", "*linux_riscv64"]
inherit.config-settings = "append"
# disable tests on those platforms, QEMU is taking to long for jobs to pass on GHA
config-settings."cmake.define.RUN_CMAKE_TEST" = "OFF"

[[tool.cibuildwheel.overrides]]
select = ["*-musllinux_{ppc64le,s390x,riscv64}"]
build-frontend = "pip"


[tool.mypy]
files = ["src", "scripts"]
python_version = "3.8"
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true


[tool.ruff.lint]
extend-select = [
  "ARG",         # flake8-unused-arguments
  "B",           # flake8-bugbear
  "C4",          # flake8-comprehensions
  "EXE",         # flake8-executable
  "G",           # flake8-logging-format
  "I",           # isort
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "UP",          # pyupgrade
]
ignore = [
  "PLR09",  # Too many X
]
exclude = ["src/cmake/_version.py"]
flake8-unused-arguments.ignore-variadic-names = true

[tool.ruff.lint.per-file-ignores]
"_build_backend/backend.py" = ["PLC0415"]
"docs/conf.py" = ["E402"]
"*.pyi" = ["ARG001"]
"noxfile.py" = ["PLW0603"]
